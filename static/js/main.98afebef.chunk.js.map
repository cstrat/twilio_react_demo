{"version":3,"sources":["components/Activity.js","components/Connect.js","components/Control.js","components/CallLog.js","App.js","serviceWorker.js","index.js","device.js"],"names":["Activity","props","feed","react_default","a","createElement","id","map","item","i","key","Connect","_useState","useState","_useState2","Object","slicedToArray","token","setToken","_useState3","_useState4","loading","setLoading","_useState5","_useState6","alertMsg","setAlertMsg","connected","device","log","useEffect","fetch","then","res","json","responseJson","Fragment","alert_alert","isOpen","onClose","dialog","title","className","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","buttons","intent","Intent","SUCCESS","NONE","icon","disabled","onClick","setup","Control","muted","setMuted","logCall","callState","setCallState","ringing","onCall","callerID","connection","INTENT_SUCCESS","INTENT_DANGER","menu","ELEVATION_1","menuItem","INTENT_WARNING","text","disconnect","accept","menuDivider","From","reject","tooltip","content","concat","position","Position","BOTTOM","muteStatus","isMuted","mute","CallLog","logCopy","toConsumableArray","reverse","format","date","from","status","FocusStyleManager","onlyShowFocusOnTabs","Boolean","window","location","hostname","match","ReactDOM","render","setConnected","activity","setActivity","callLog","setCallLog","_useState7","_useState8","newActivity","push","callFrom","callStatus","callEntry","Date","Twilio","Device","_ref","on","conn","parameters","setupDevice","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98afebef.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Activity(props) {\n  const { feed } = props;\n  return (\n    <ul id=\"activityLog\">\n      {feed.map((item, i) => (\n        <li key={i}>{item}</li>\n      ))}\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Classes, Intent, Dialog, Button, Alert } from \"@blueprintjs/core\";\n\nexport default function Connect(props) {\n  // Local State\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [alertMsg, setAlertMsg] = useState(null);\n\n  // Local reference to main device in main component\n  const { connected, device, log } = props;\n\n  // On Load Get Auth Token (do this once)\n  useEffect(() => {\n    fetch(\"https://red-goat-4208.twil.io/capability-token\")\n      .then(res => res.json())\n      .then(responseJson => {\n        if (responseJson.token) {\n          log(\"üîë Auth Token Recieved!\");\n          setLoading(false);\n          setToken(responseJson.token);\n        } else {\n          setAlertMsg(\"Error Fetching Token!\");\n        }\n      });\n  }, []);\n\n  // Function To Setup Device - Best Practice via Button Click\n  // Ref: https://www.twilio.com/docs/voice/client/javascript/device#best-practice-note\n  function setupDevice() {\n    device.setup(token);\n  }\n\n  return (\n    <>\n      <Alert\n        isOpen={alertMsg}\n        onClose={() => {\n          setAlertMsg(null);\n        }}\n      >\n        {alertMsg}\n      </Alert>\n      <Dialog isOpen={!connected} title=\"Twilio Agent Demo\">\n        <div className={Classes.DIALOG_BODY}>\n          <p>\n            <strong>Before you can recieve calls this client will need to be authorised, fetching your token now...</strong>\n          </p>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button\n              intent={token ? Intent.SUCCESS : Intent.NONE}\n              loading={loading}\n              icon={!token ? \"offline\" : \"endorsed\"}\n              disabled={!token}\n              onClick={setupDevice}\n            >\n              Ready Up\n            </Button>\n          </div>\n        </div>\n      </Dialog>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Classes, Position, Icon, Menu, MenuItem, MenuDivider, Tooltip } from \"@blueprintjs/core\";\n\nexport default function Control(props) {\n  const [muted, setMuted] = useState(false);\n\n  const { connected, log, logCall, callState, setCallState } = props;\n\n  const { ringing, onCall, callerID, connection } = callState;\n\n  function handleAction() {\n    if (onCall) {\n      connection.disconnect();\n      setCallState({\n        ringing: false,\n        onCall: false,\n        callerID: null,\n        connection: null\n      });\n    } else {\n      connection.accept();\n    }\n  }\n\n  function handleReject() {\n    log(\"‚ùå Call Rejected.\");\n    logCall(callState.From, \"Call Rejected\");\n    connection.reject();\n    setCallState({\n      ringing: false,\n      onCall: false,\n      callerID: null,\n      connection: null\n    });\n  }\n\n  function toggleMute() {\n    if (callState.onCall) {\n      let muteStatus = connection.isMuted();\n      setMuted(!muteStatus);\n      connection.mute(!muteStatus);\n    }\n  }\n\n  return (\n    <div id=\"menu\">\n      <strong>Twilio Agent Demo</strong>\n      <br />\n      <em>\n        <Icon className={connected ? Classes.INTENT_SUCCESS : Classes.INTENT_DANGER} icon={connected ? \"confirm\" : \"offline\"} />{\" \"}\n        {connected ? \"Online!\" : \"Offline\"}\n      </em>\n\n      <Menu id=\"actionMenu\" className={Classes.ELEVATION_1}>\n        {ringing || onCall ? (\n          <MenuItem\n            className={onCall ? Classes.INTENT_WARNING : Classes.INTENT_SUCCESS}\n            icon=\"phone\"\n            text={onCall ? \"End Call\" : \"Answer Call\"}\n            onClick={handleAction}\n          />\n        ) : (\n          <MenuDivider title=\"No Active Calls\" />\n        )}\n\n        {ringing && <MenuItem className={Classes.INTENT_DANGER} icon=\"phone\" text=\"Reject Call\" onClick={handleReject} />}\n\n        {callerID && (\n          // On Call Controls\n          <>\n            <MenuDivider />\n            <Tooltip content={`Click here to ${muted ? \"unmute\" : \"mute\"} call.`} position={Position.BOTTOM}>\n              <MenuItem className={muted && Classes.INTENT_WARNING} text={callerID} icon={muted ? \"volume-off\" : \"volume-up\"} onClick={toggleMute} />\n            </Tooltip>\n          </>\n        )}\n      </Menu>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { format } from \"date-fns\";\n\nexport default function CallLog(props) {\n  const { log } = props;\n  const logCopy = [...log].reverse() || [];\n\n  return (\n    <ul id=\"callLog\">\n      {logCopy.map((item, i) => (\n        <li key={i}>\n          {format(item.date, \"YY/MM/DD - HH:mm A\")}: {item.from} - {item.status}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FocusStyleManager } from \"@blueprintjs/core\";\nimport Activity from \"./components/Activity\";\nimport Connect from \"./components/Connect\";\nimport Control from \"./components/Control\";\nimport CallLog from \"./components/CallLog\";\nimport setupDevice from \"./device\";\n\n// Import various CSS dependancies\nimport \"normalize.css/normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n\n// Custom CSS\nimport \"./App.css\";\n\n// Hides blue outline around elements\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Main App Component\nexport default function App() {\n  // Application State\n  const [connected, setConnected] = useState(false);\n  const [activity, setActivity] = useState([]);\n  const [callLog, setCallLog] = useState([]);\n  const [callState, setCallState] = useState({\n    ringing: false,\n    onCall: false,\n    callerID: null,\n    connection: null\n  });\n\n  // Helper Function To Log Activity\n  function log(newActivity) {\n    activity.push(newActivity); // Not correct way to do this, but for some reason the spread operator didn't work\n    setActivity(activity);\n  }\n\n  // Helper Function To Log Calls\n  function logCall(callFrom, callStatus) {\n    let callEntry = {\n      date: new Date(),\n      from: callFrom,\n      status: callStatus\n    };\n    setCallLog([...callLog, callEntry]);\n  }\n\n  // Client Device Object\n  // eslint-disable-next-line no-undef\n  const device = new Twilio.Device();\n\n  setupDevice({\n    device,\n    setConnected,\n    log,\n    callState,\n    setCallState,\n    logCall\n  });\n\n  // App\n  return (\n    <>\n      <Connect connected={connected} setConnected={setConnected} device={device} log={log} />\n      <div id=\"frame\">\n        <Control connected={connected} device={device} log={log} logCall={logCall} callState={callState} setCallState={setCallState} />\n        <Activity feed={activity} />\n        {connected && <CallLog log={callLog} />}\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default function setupDevice({ device, setConnected, log, logCall, callState, setCallState }) {\n  // Events are logged\n  device.on(\"ready\", () => {\n    setConnected(true);\n    log(\"üëç Client Ready.\");\n  });\n\n  // Incomming call\n  device.on(\"incoming\", conn => {\n    log(`üìû Incoming Call: ${conn.parameters.From}`);\n    // accept the incoming connection and start two-way audio\n    setCallState({\n      ringing: true,\n      onCall: false,\n      callerID: conn.parameters.From,\n      connection: conn\n    });\n  });\n\n  // Connected call\n  device.on(\"connect\", conn => {\n    log(\"üìû Call Established.\");\n    setCallState({\n      ringing: false,\n      onCall: true,\n      callerID: conn.parameters.From,\n      connection: conn\n    });\n  });\n\n  // Disconnected call\n  device.on(\"disconnect\", conn => {\n    log(\"‚ùå Call Disconnected.\");\n    logCall(callState.callerID, \"Call Completed\");\n    setCallState({\n      ringing: false,\n      onCall: false,\n      callerID: null,\n      connection: null\n    });\n  });\n\n  // Cancelled Call\n  device.on(\"cancel\", conn => {\n    log(\"‚ùå Caller Hung Up.\");\n    logCall(callState.callerID, \"Call Abandoned\");\n    setCallState({\n      ringing: false,\n      onCall: false,\n      callerID: null,\n      connection: null\n    });\n  });\n}\n"],"sourceRoot":""}